import json
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from bclg_apps.files_manager import FilesManager

def generate_code_summary(llm, programming_language, base_path, file_analysis):
    """
    Generate a Summary of the file provided.
    
    Parameters:
    - programming language (string).
    - base_path (string)
    - file_analysis (dict): The analysis of the file returned by `analyze_file`.

    Returns:
    - str: The summary generated by the LLM.
    """
    file_path = file_analysis.get("file", "Unknown file")
    fm = FilesManager()
    file_content = fm.read_file_content(base_path=base_path, file=file_path)

    details = file_analysis.get("details", [])
    
    file_summary = ""
    for detail in details:
        type_name = detail.get("type", "Unknown type")
        instance_variables = detail.get("instance_variables", [])
        methods = detail.get("methods", [])
        depends = detail.get("depends", [])


        type_content = file_content
        structure = file_analysis.get("structure", None)
        if structure:
            type_content = get_type_content(file_content=file_content, file_structure=structure, type_name=type_name)

        code_details_prompt = f"""
        You are a code documentation generator specialized in the {programming_language} programming language. Your task is to generate documentation in markdown format of {programming_language} files.

        The source code to be documented is presented below in between "source_code" tags:
        <source_code>
        {type_content}
        </source_code>

        Based on the source code provided, write a document in markdown format containing the following:
        - A title "# {type_name}".
        - Under "## Summary", a description of what {type_name} does and how {type_name} can be used.
        """

        # Append sections conditionally
        if instance_variables:
            code_details_prompt += """
        - Under "## Instance Variables", a list of the instance variables in the source code ({instance_variables}), their types and their description.
        """.format(instance_variables=", ".join(instance_variables))

        if methods:
            code_details_prompt += """
        - Under "## Methods", a list of the methods defined in the source code ({methods}), including their definition and their description.
        """.format(methods=", ".join(methods))

        if depends:
            code_details_prompt += """
        - Under "## Dependencies", a list of the external dependencies ({depends}).
        """.format(depends=", ".join(depends))

        code_details_prompt += """
        Important:
        - Do not include any conversational comments or introductory phrases.
        - Only output the documentation in the specified format.
        - Don't add "disclaimers" or "notes" that you didn't find some information. If you can't find some information, simply omit it from the output.
        - Bullet point lists should use the "-" character.
        """
        result = llm.invoke(code_details_prompt)
        summary = ""
        if isinstance(result, str):
            summary = result
        else:
            summary = result.content
        file_summary += summary + "\n\n"
    return file_summary

def extract_content(file_content, start_offset, end_offset):
    return file_content[start_offset:end_offset].strip()

def get_type_content(file_content, file_structure, type_name):
    for item in file_structure['key.substructure']:
        if item.get('key.name') == type_name:
            start_offset = item['key.offset']-1
            end_offset = start_offset + item['key.length']
            return extract_content(file_content, start_offset, end_offset)
    return None