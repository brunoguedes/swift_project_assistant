import json
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from bclg_apps.files_manager import FilesManager

def generate_code_summary(llm, programming_language, base_path, file_analysis):
    """
    Generate a Summary of the file provided.
    
    Parameters:
    - programming language (string).
    - base_path (string)
    - file_analysis (dict): The analysis of the file returned by `analyze_file`.

    Returns:
    - str: The summary generated by the LLM.
    """
    file_path = file_analysis.get("file", "Unknown file")
    fm = FilesManager()
    file_content = fm.read_file_content(base_path=base_path, file=file_path)

    details = file_analysis.get("details", [])
    
    types_details = []
    for detail in details:
        type_name = detail.get("type", "Unknown type")
        instance_variables = detail.get("instance_variables", [])
        methods = detail.get("methods", [])
        depends = detail.get("depends", [])

        type_detail = {
            "type_name": type_name,
            "instance_variables": instance_variables,
            "methods": methods,
            "depends": depends
        }
        types_details.append(type_detail)

    types_details_json = json.dumps(types_details, indent=4)

    # Create the template string
    template_str = """
You are a code documentation generator specialized in the {programming_language} programming language. Your task is to generate documentation in markdown format of {programming_language} files.

Please follow these instructions:
- Do not include any conversational comments or introductory phrases.
- Only output the documentation in the specified format.
- Don't add "disclaimers" or "notes" that you didn't find some information. If you can't find some information, simply omit it from the output.
- Bullet point lists should use the "-" character.
- Generate your output using the 2 inputs:
  - Input 1: A json containing details of each type defined in a {programming_language} file. This details include: instance variables, methods and dependencies.
  - Input 2: The content of the {programming_language} file we want to document.

For each of the types you receive in the json, follow the steps bellow to generate your output:
  1- Add a top level title which will be the type name.
  2- Add a summary of what the type does.
  3- If the type has any instance variables, add a sub-section "Instance Variables", that will contain a bullet point list off all instance variables with it's types and a short description.
  4- If the type has any methods, add a sub-section "Methods", that will contain a bullet point list off all methods including their return type, parameters types and a short description.
  5- If the type has any dependencies, add a sub-section "Dependencies", that will contain a bullet point list off all dependencies (types).

Input 1:
```
Types Details:

{types_details}
```

Input 2:
Bellow is the content of the {programming_language} file:
```
{file_content}
```
"""

    # Create and return the prompt template
    prompt_template = PromptTemplate(input_variables=["programming_language", "file_path", "types_details", "file_content"], template=template_str)

    chain = LLMChain(llm=llm, prompt=prompt_template, verbose=True, output_key='summary_output')
    summary = chain.run(programming_language=programming_language, file_path=file_path, types_details=types_details_json, file_content=file_content)
    
    return summary
