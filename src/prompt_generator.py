import json
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from bclg_apps.files_manager import FilesManager

def generate_summary_prompt(llm, file_analysis):
    """
    Generate a PromptTemplate to summarize the Swift file based on the analysis.
    
    Parameters:
    - file_analysis (dict): The analysis of the file returned by `analyze_file`.

    Returns:
    - str: The summary generated by the LLM.
    """
    # Extract information from file analysis
    file_path = file_analysis.get("file", "Unknown file")
    fm = FilesManager()
    file_content = fm.read_file_content(base_path="", file=file_path)

    details = file_analysis.get("details", [])
    
    types_details = []
    for detail in details:
        type_name = detail.get("type", "Unknown type")
        instance_variables = detail.get("instance_variables", [])
        methods = detail.get("methods", [])
        depends = detail.get("depends", [])

        type_detail = {
            "type_name": type_name,
            "instance_variables": instance_variables,
            "methods": methods,
            "depends": depends
        }
        types_details.append(type_detail)

    types_details_json = json.dumps(types_details, indent=4)

    # Create the template string
    template_str = """
You are a skilled Swift Software Engineer. Your goal is to generate documentation of swift files.
In order to achieve your goal, you use not only the code itself, but also some metadata containing types details that are declared in the swift file. This types details contain: the type name, it's instance variables, it's methods and any dependencies it might have. Both the Swift file content and the type details are given to you via this prompt. Don't  "disclaimers" or "notes" that you didn't find some information. If you can't find some information, simply omit it from the output.

To genera the the documentation you follow an analytical process of:
1- Analyse carefully the types metadata.
2- Do a cross reference with the Swift File content to find missing instance variable types and dependencies.
3- Start writing the documentation in markdown format, following the steps bellow for each of the types in the Types Details:
  1- Add a top level title which will be the type name.
  2- Add a summary of what the type does, including the file name (with the relative path).
  3- If the type has any instance variables, add a sub-section "Instance Variables", that will contain a bullet point list off all instance variables with it's types and a short description.
  4- If the type has any methods, add a sub-section "Methods", that will contain a bullet point list off all methods including their return type, parameters types and a short description.
  5- If the type has any dependencies, add a sub-section "Dependencies", that will contain a bullet point list off all dependencies (types).

Use the following information to generate the documentation:

Swift file path:
```
{file_path}
```

Types Details:
```
{types_details}
```

Bellow is the content of the swift file:
```
{file_content}
```
"""

    # Create and return the prompt template
    prompt_template = PromptTemplate(input_variables=["file_path", "types_details", "file_content"], template=template_str)

    chain = LLMChain(llm=llm, prompt=prompt_template, verbose=True, output_key='summary_output')
    summary = chain.run(file_path=file_path, types_details=types_details_json, file_content=file_content)
    
    return summary
